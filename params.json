{"name":"Node Behance Api","tagline":"a utility for adobe behance services.","body":"node-behance-api\r\n================\r\n![alt text](https://lh3.googleusercontent.com/-LhvnLJ399cM/VEeEVoEjoXI/AAAAAAAAAy8/EkHJZWtKkfM/w530-h207-no/behance-logo-grey.png \"node-behance-logo\")\r\n\r\nA utility wrapper for adobe behance services. This utility is developed for nodejs only. Currently it supports most of the API's of Adobe Behance.\r\n\r\nBefore starting development on node. You have to register your app on https://www.behance.net/dev/register. Register your app and get the client id from there.\r\n\r\n###Prerequisites for node-behance-api\r\nThis utility wrapper uses request module.\r\n\r\nRequirement\r\n------------\r\nrequest - npm\r\nhttps://www.npmjs.org/package/request\r\n\r\n###Require node-behance-api to your nodejs app\r\n``` javascript\r\nvar Behance = require(\"node-behance-api\");\r\n```\r\n###Initialize Behance module with your client_id\r\n``` javascript\r\nvar behance = new Behance({\"client_id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"})\r\nBehance.initOptions();\r\n```\r\nHere Behance.initOptions() is where you intialize node-behance-api. You can further integrate this module with currently added API. We will see example later on.\r\n\r\n###Call a simple api let's say users/{user}\r\n##Examples:\r\n``` javascript\r\nvar Behance = require(\"node-behance-api\");\r\nvar behance = new Behance({\"client_id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"})\r\nBehance.initOptions();\r\nbehance.get({\r\n    api: Behance.APIS.GET_USER,\r\n    params: { //or simply behance.get('user',\r\n        user:'deepakmshrma'\r\n\r\n    }\r\n}, function (error, result) {\r\n    if (error)\r\n        console.log(error)\r\n    else\r\n        console.log(result)\r\n});\r\n```\r\nHere Behance.APIS.GET_USER, name of the API which you want to access. There are several API's available. You can find name of the API's in apiNameEnum.js. You can also pass simple string as api name here.\r\n\r\nList of API's available right now:\r\n``` javascript\r\nGET_USERS: \"users\",\r\nGET_USER: \"user\",\r\nGET_USER_PRODUCT: \"user_products\",\r\nGET_USER_WIPS: \"user_wips\",\r\nGET_USER_APR: \"user_appreciations\",\r\nGET_USER_COLLECTIONS: \"user_collections\",\r\nGET_USER_STATS: \"user_stats\",\r\nGET_USER_FOLLOWERS: \"user_followers\",\r\nGET_USER_FOLLOWEES: \"user_following\",\r\nGET_USER_FEEDBACK: \"user_feedback\",\r\nGET_USER_WORK_EXP: \"user_work_experience\",\r\nGET_PRODUCTS: \"projects\",\r\nGET_PRODUCT: \"project\",\r\nGET_PRODUCT_COMMENTS: \"project_comments\",\r\nGET_COLLECTIONS: \"collections\",\r\nGET_COLLECTION: \"collection\",\r\nGET_COLLECTION_PROJECTS: \"collection_projects\",\r\nGET_WIPS: \"wips\",\r\nGET_WIP_REVISION: \"wip_revision\",\r\nGET_WIP_REVISION_COMMENTS: \"wip_revision_comments\",\r\nGET_WIP: \"wip\"\r\n```\r\n###Integration of another API's node-behance-api\r\nCurrently this node-behance-api supports most of the behance api. But if future you can upgrade it with other list of API's.\r\n``` javascript\r\nvar Behance = require('node-behance-api'),\r\n    extend = require('extend');\r\nvar behance = new Behance({'client_id': 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx'})\r\nBehance.initOptions({\r\n    postProcess: function (options) {\r\n        var newapis = {\r\n            'newapis': {\r\n                'name': 'newapis',\r\n                'url': 'users',\r\n                'params': {\r\n                    'client_id': true,\r\n                    'q': false,\r\n                    'sort': false\r\n                }\r\n            }\r\n        }\r\n        options = extend(true, {}, newapis, options);\r\n        return options;\r\n    }\r\n});\r\nbehance\r\n    .get({\r\n        api: 'newapis',\r\n        params: {\r\n            user: 'deepakmshrma'\r\n        }\r\n    }, function (error, result) {\r\n        if (error)\r\n            console.log(error)\r\n        else\r\n            console.log(result)\r\n    });\r\n```\r\nHere i have use https://www.npmjs.com/package/extend module to extend previous option with new api.\r\n\r\nYou can use this initOptions method to override the existing api. If you pass new api name same as defined one it will override the previous api.\r\n####Example:\r\n``` javascript\r\nBehance.initOptions({\r\n    postProcess: function (options) {\r\n        var newapis = {\r\n            \"users\": {\r\n                \"name\": \"users\",\r\n                \"url\": \"users\",\r\n                \"params\": {\r\n                    \"client_id\": true,\r\n                    \"q\": false,\r\n                    \"sort\": false,\r\n                    \"time\": false,\r\n                    \"field\": false,\r\n                    \"country\": false,\r\n                    \"state\": false,\r\n                    \"city\": false,\r\n                    \"page\": false,\r\n                    \"tags\": false,\r\n                    \"color_hex\": false,\r\n                    \"color_range\": false\r\n                }\r\n            }\r\n        }\r\n        options = extend(true, {}, newapis, options);\r\n        return options;\r\n    }\r\n});\r\n```\r\n###Error handling with node-behance-api\r\nError handling with this module is very easy. You can specify the mandatory param with options. If the param value is true. It means it is mandatory for given APIâ€™s.\r\n``` javascript\r\n\"newapi\": {\r\n    \"name\": \"newapis\",\r\n    \"url\": \"users\",\r\n    \"params\": {\r\n        \"client_id\": true,\r\n        \"q\": false,\r\n        \"sort\": false,\r\n        \"time\": true,\r\n        \"field\": false,\r\n        \"country\": false,\r\n        \"state\": false,\r\n        \"city\": false,\r\n        \"page\": false,\r\n        \"tags\": false,\r\n        \"color_hex\": false,\r\n        \"color_range\": false\r\n    }\r\n}\r\n```\r\nHere param \"time\" is manditory for newapi.\r\n","google":"UA-69481121-1","note":"Don't delete this file! It's used internally to help with page regeneration."}